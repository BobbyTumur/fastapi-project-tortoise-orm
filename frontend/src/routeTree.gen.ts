/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ValidateTotpImport } from './routes/validate-totp'
import { Route as SetupPasswordImport } from './routes/setup-password'
import { Route as ResetPasswordImport } from './routes/reset-password'
import { Route as RecoverPasswordImport } from './routes/recover-password'
import { Route as LoginImport } from './routes/login'
import { Route as LayoutImport } from './routes/_layout'
import { Route as LayoutIndexImport } from './routes/_layout/index'
import { Route as LayoutProfileImport } from './routes/_layout/profile'
import { Route as LayoutAdminImport } from './routes/_layout/admin'
import { Route as LayoutServicesIndexImport } from './routes/_layout/services/index'
import { Route as LayoutServicesServiceidTemplateImport } from './routes/_layout/services/$service_id/template'
import { Route as LayoutServicesServiceidLogImport } from './routes/_layout/services/$service_id/log'

// Create/Update Routes

const ValidateTotpRoute = ValidateTotpImport.update({
  path: '/validate-totp',
  getParentRoute: () => rootRoute,
} as any)

const SetupPasswordRoute = SetupPasswordImport.update({
  path: '/setup-password',
  getParentRoute: () => rootRoute,
} as any)

const ResetPasswordRoute = ResetPasswordImport.update({
  path: '/reset-password',
  getParentRoute: () => rootRoute,
} as any)

const RecoverPasswordRoute = RecoverPasswordImport.update({
  path: '/recover-password',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const LayoutIndexRoute = LayoutIndexImport.update({
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutProfileRoute = LayoutProfileImport.update({
  path: '/profile',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutAdminRoute = LayoutAdminImport.update({
  path: '/admin',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutServicesIndexRoute = LayoutServicesIndexImport.update({
  path: '/services/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutServicesServiceidTemplateRoute =
  LayoutServicesServiceidTemplateImport.update({
    path: '/services/$service_id/template',
    getParentRoute: () => LayoutRoute,
  } as any)

const LayoutServicesServiceidLogRoute = LayoutServicesServiceidLogImport.update(
  {
    path: '/services/$service_id/log',
    getParentRoute: () => LayoutRoute,
  } as any,
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/recover-password': {
      id: '/recover-password'
      path: '/recover-password'
      fullPath: '/recover-password'
      preLoaderRoute: typeof RecoverPasswordImport
      parentRoute: typeof rootRoute
    }
    '/reset-password': {
      id: '/reset-password'
      path: '/reset-password'
      fullPath: '/reset-password'
      preLoaderRoute: typeof ResetPasswordImport
      parentRoute: typeof rootRoute
    }
    '/setup-password': {
      id: '/setup-password'
      path: '/setup-password'
      fullPath: '/setup-password'
      preLoaderRoute: typeof SetupPasswordImport
      parentRoute: typeof rootRoute
    }
    '/validate-totp': {
      id: '/validate-totp'
      path: '/validate-totp'
      fullPath: '/validate-totp'
      preLoaderRoute: typeof ValidateTotpImport
      parentRoute: typeof rootRoute
    }
    '/_layout/admin': {
      id: '/_layout/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof LayoutAdminImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/profile': {
      id: '/_layout/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof LayoutProfileImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/services/': {
      id: '/_layout/services/'
      path: '/services'
      fullPath: '/services'
      preLoaderRoute: typeof LayoutServicesIndexImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/services/$service_id/log': {
      id: '/_layout/services/$service_id/log'
      path: '/services/$service_id/log'
      fullPath: '/services/$service_id/log'
      preLoaderRoute: typeof LayoutServicesServiceidLogImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/services/$service_id/template': {
      id: '/_layout/services/$service_id/template'
      path: '/services/$service_id/template'
      fullPath: '/services/$service_id/template'
      preLoaderRoute: typeof LayoutServicesServiceidTemplateImport
      parentRoute: typeof LayoutImport
    }
  }
}

// Create and export the route tree

interface LayoutRouteChildren {
  LayoutAdminRoute: typeof LayoutAdminRoute
  LayoutProfileRoute: typeof LayoutProfileRoute
  LayoutIndexRoute: typeof LayoutIndexRoute
  LayoutServicesIndexRoute: typeof LayoutServicesIndexRoute
  LayoutServicesServiceidLogRoute: typeof LayoutServicesServiceidLogRoute
  LayoutServicesServiceidTemplateRoute: typeof LayoutServicesServiceidTemplateRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutAdminRoute: LayoutAdminRoute,
  LayoutProfileRoute: LayoutProfileRoute,
  LayoutIndexRoute: LayoutIndexRoute,
  LayoutServicesIndexRoute: LayoutServicesIndexRoute,
  LayoutServicesServiceidLogRoute: LayoutServicesServiceidLogRoute,
  LayoutServicesServiceidTemplateRoute: LayoutServicesServiceidTemplateRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof LayoutRouteWithChildren
  '/login': typeof LoginRoute
  '/recover-password': typeof RecoverPasswordRoute
  '/reset-password': typeof ResetPasswordRoute
  '/setup-password': typeof SetupPasswordRoute
  '/validate-totp': typeof ValidateTotpRoute
  '/admin': typeof LayoutAdminRoute
  '/profile': typeof LayoutProfileRoute
  '/': typeof LayoutIndexRoute
  '/services': typeof LayoutServicesIndexRoute
  '/services/$service_id/log': typeof LayoutServicesServiceidLogRoute
  '/services/$service_id/template': typeof LayoutServicesServiceidTemplateRoute
}

export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/recover-password': typeof RecoverPasswordRoute
  '/reset-password': typeof ResetPasswordRoute
  '/setup-password': typeof SetupPasswordRoute
  '/validate-totp': typeof ValidateTotpRoute
  '/admin': typeof LayoutAdminRoute
  '/profile': typeof LayoutProfileRoute
  '/': typeof LayoutIndexRoute
  '/services': typeof LayoutServicesIndexRoute
  '/services/$service_id/log': typeof LayoutServicesServiceidLogRoute
  '/services/$service_id/template': typeof LayoutServicesServiceidTemplateRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/login': typeof LoginRoute
  '/recover-password': typeof RecoverPasswordRoute
  '/reset-password': typeof ResetPasswordRoute
  '/setup-password': typeof SetupPasswordRoute
  '/validate-totp': typeof ValidateTotpRoute
  '/_layout/admin': typeof LayoutAdminRoute
  '/_layout/profile': typeof LayoutProfileRoute
  '/_layout/': typeof LayoutIndexRoute
  '/_layout/services/': typeof LayoutServicesIndexRoute
  '/_layout/services/$service_id/log': typeof LayoutServicesServiceidLogRoute
  '/_layout/services/$service_id/template': typeof LayoutServicesServiceidTemplateRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/login'
    | '/recover-password'
    | '/reset-password'
    | '/setup-password'
    | '/validate-totp'
    | '/admin'
    | '/profile'
    | '/'
    | '/services'
    | '/services/$service_id/log'
    | '/services/$service_id/template'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/recover-password'
    | '/reset-password'
    | '/setup-password'
    | '/validate-totp'
    | '/admin'
    | '/profile'
    | '/'
    | '/services'
    | '/services/$service_id/log'
    | '/services/$service_id/template'
  id:
    | '__root__'
    | '/_layout'
    | '/login'
    | '/recover-password'
    | '/reset-password'
    | '/setup-password'
    | '/validate-totp'
    | '/_layout/admin'
    | '/_layout/profile'
    | '/_layout/'
    | '/_layout/services/'
    | '/_layout/services/$service_id/log'
    | '/_layout/services/$service_id/template'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren
  LoginRoute: typeof LoginRoute
  RecoverPasswordRoute: typeof RecoverPasswordRoute
  ResetPasswordRoute: typeof ResetPasswordRoute
  SetupPasswordRoute: typeof SetupPasswordRoute
  ValidateTotpRoute: typeof ValidateTotpRoute
}

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
  LoginRoute: LoginRoute,
  RecoverPasswordRoute: RecoverPasswordRoute,
  ResetPasswordRoute: ResetPasswordRoute,
  SetupPasswordRoute: SetupPasswordRoute,
  ValidateTotpRoute: ValidateTotpRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_layout",
        "/login",
        "/recover-password",
        "/reset-password",
        "/setup-password",
        "/validate-totp"
      ]
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/admin",
        "/_layout/profile",
        "/_layout/",
        "/_layout/services/",
        "/_layout/services/$service_id/log",
        "/_layout/services/$service_id/template"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/recover-password": {
      "filePath": "recover-password.tsx"
    },
    "/reset-password": {
      "filePath": "reset-password.tsx"
    },
    "/setup-password": {
      "filePath": "setup-password.tsx"
    },
    "/validate-totp": {
      "filePath": "validate-totp.tsx"
    },
    "/_layout/admin": {
      "filePath": "_layout/admin.tsx",
      "parent": "/_layout"
    },
    "/_layout/profile": {
      "filePath": "_layout/profile.tsx",
      "parent": "/_layout"
    },
    "/_layout/": {
      "filePath": "_layout/index.tsx",
      "parent": "/_layout"
    },
    "/_layout/services/": {
      "filePath": "_layout/services/index.tsx",
      "parent": "/_layout"
    },
    "/_layout/services/$service_id/log": {
      "filePath": "_layout/services/$service_id/log.tsx",
      "parent": "/_layout"
    },
    "/_layout/services/$service_id/template": {
      "filePath": "_layout/services/$service_id/template.tsx",
      "parent": "/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
