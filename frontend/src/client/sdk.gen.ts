// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from "./core/CancelablePromise";
import { OpenAPI } from "./core/OpenAPI";
import { request as __request } from "./core/request";
import type {
	LoginAccessTokenApiV1LoginAccessTokenPostData,
	LoginAccessTokenApiV1LoginAccessTokenPostResponse,
	VerifyTotpApiV1LoginValidateTotpPostData,
	VerifyTotpApiV1LoginValidateTotpPostResponse,
	RefreshAccessTokenApiV1LoginRefreshTokenPostData,
	RefreshAccessTokenApiV1LoginRefreshTokenPostResponse,
	RecoverPasswordApiV1PasswordRecoveryEmailPostData,
	RecoverPasswordApiV1PasswordRecoveryEmailPostResponse,
	ResetPasswordApiV1ResetPasswordPostData,
	ResetPasswordApiV1ResetPasswordPostResponse,
	SetUpPasswordApiV1SetupPasswordPostData,
	SetUpPasswordApiV1SetupPasswordPostResponse,
	GetServicesApiV1ServicesGetData,
	GetServicesApiV1ServicesGetResponse,
	CreateServiceApiV1ServicesPostData,
	CreateServiceApiV1ServicesPostResponse,
	GetServiceApiV1ServicesServiceIdGetData,
	GetServiceApiV1ServicesServiceIdGetResponse,
	DeleteServiceApiV1ServicesServiceIdDeleteData,
	DeleteServiceApiV1ServicesServiceIdDeleteResponse,
	GetServiceUsersApiV1ServicesServiceIdUsersGetData,
	GetServiceUsersApiV1ServicesServiceIdUsersGetResponse,
	GetServiceConfigApiV1ServicesServiceIdConfigGetData,
	GetServiceConfigApiV1ServicesServiceIdConfigGetResponse,
	UpdateServiceConfigApiV1ServicesServiceIdConfigPatchData,
	UpdateServiceConfigApiV1ServicesServiceIdConfigPatchResponse,
	EnableTotpApiV1TotpEnablePostData,
	EnableTotpApiV1TotpEnablePostResponse,
	TotpLoginVerifyApiV1TotpVerifyPostData,
	TotpLoginVerifyApiV1TotpVerifyPostResponse,
	DisableTotpApiV1TotpDisableDeleteData,
	DisableTotpApiV1TotpDisableDeleteResponse,
	AdminDisableTotpApiV1TotpDisableUserIdPostData,
	AdminDisableTotpApiV1TotpDisableUserIdPostResponse,
	ReadUsersApiV1UsersGetData,
	ReadUsersApiV1UsersGetResponse,
	ReadUserMeApiV1UsersMeGetData,
	ReadUserMeApiV1UsersMeGetResponse,
	ReadUserByIdApiV1UsersUserIdGetData,
	ReadUserByIdApiV1UsersUserIdGetResponse,
	UpdateUserApiV1UsersUserIdPatchData,
	UpdateUserApiV1UsersUserIdPatchResponse,
	DeleteUserApiV1UsersUserIdDeleteData,
	DeleteUserApiV1UsersUserIdDeleteResponse,
	RegisterUserApiV1UsersAdduserPostData,
	RegisterUserApiV1UsersAdduserPostResponse,
	UpdatePasswordMeApiV1UsersMePasswordPatchData,
	UpdatePasswordMeApiV1UsersMePasswordPatchResponse,
	GetUserServicesApiV1UsersUserIdServicesGetData,
	GetUserServicesApiV1UsersUserIdServicesGetResponse,
	AddServicesToUserApiV1UsersUserIdServicesPatchData,
	AddServicesToUserApiV1UsersUserIdServicesPatchResponse,
	TestEmailApiV1UtilsTestEmailPostData,
	TestEmailApiV1UtilsTestEmailPostResponse,
	HealthCheckApiV1UtilsHealthCheckGetResponse,
} from "./types.gen";

export class LoginService {
	/**
	 * Login Access Token
	 * OAuth2 compatible token login, get an access token for future requests
	 * @param data The data for the request.
	 * @param data.formData
	 * @returns unknown Successful Response
	 * @throws ApiError
	 */
	public static accessTokenApiV1LoginAccessTokenPost(
		data: LoginAccessTokenApiV1LoginAccessTokenPostData,
	): CancelablePromise<LoginAccessTokenApiV1LoginAccessTokenPostResponse> {
		return __request(OpenAPI, {
			method: "POST",
			url: "/api/v1/login/access-token",
			formData: data.formData,
			mediaType: "application/x-www-form-urlencoded",
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Verify Totp
	 * Validate TOTP code and issue an access token
	 * @param data The data for the request.
	 * @param data.requestBody
	 * @returns unknown Successful Response
	 * @throws ApiError
	 */
	public static verifyTotpApiV1LoginValidateTotpPost(
		data: VerifyTotpApiV1LoginValidateTotpPostData,
	): CancelablePromise<VerifyTotpApiV1LoginValidateTotpPostResponse> {
		return __request(OpenAPI, {
			method: "POST",
			url: "/api/v1/login/validate-totp",
			body: data.requestBody,
			mediaType: "application/json",
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Refresh Access Token
	 * Refresh the access token using the refresh token stored in the cookie.
	 * @param data The data for the request.
	 * @param data.refreshToken
	 * @returns unknown Successful Response
	 * @throws ApiError
	 */
	public static refreshAccessTokenApiV1LoginRefreshTokenPost(
		data: RefreshAccessTokenApiV1LoginRefreshTokenPostData = {},
	): CancelablePromise<RefreshAccessTokenApiV1LoginRefreshTokenPostResponse> {
		return __request(OpenAPI, {
			method: "POST",
			url: "/api/v1/login/refresh-token",
			cookies: {
				refresh_token: data.refreshToken,
			},
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Recover Password
	 * Password Recovery
	 * @param data The data for the request.
	 * @param data.email
	 * @returns Message Successful Response
	 * @throws ApiError
	 */
	public static recoverPasswordApiV1PasswordRecoveryEmailPost(
		data: RecoverPasswordApiV1PasswordRecoveryEmailPostData,
	): CancelablePromise<RecoverPasswordApiV1PasswordRecoveryEmailPostResponse> {
		return __request(OpenAPI, {
			method: "POST",
			url: "/api/v1/password-recovery/{email}",
			path: {
				email: data.email,
			},
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Reset Password
	 * Reset password
	 * @param data The data for the request.
	 * @param data.requestBody
	 * @returns Message Successful Response
	 * @throws ApiError
	 */
	public static resetPasswordApiV1ResetPasswordPost(
		data: ResetPasswordApiV1ResetPasswordPostData,
	): CancelablePromise<ResetPasswordApiV1ResetPasswordPostResponse> {
		return __request(OpenAPI, {
			method: "POST",
			url: "/api/v1/reset-password",
			body: data.requestBody,
			mediaType: "application/json",
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Set Up Password
	 * Set up password
	 * @param data The data for the request.
	 * @param data.requestBody
	 * @returns Message Successful Response
	 * @throws ApiError
	 */
	public static setUpPasswordApiV1SetupPasswordPost(
		data: SetUpPasswordApiV1SetupPasswordPostData,
	): CancelablePromise<SetUpPasswordApiV1SetupPasswordPostResponse> {
		return __request(OpenAPI, {
			method: "POST",
			url: "/api/v1/setup-password",
			body: data.requestBody,
			mediaType: "application/json",
			errors: {
				422: "Validation Error",
			},
		});
	}
}

export class ServicesService {
	/**
	 * Get Services
	 * List all services
	 * @param data The data for the request.
	 * @param data.skip
	 * @param data.limit
	 * @param data.expectTotp
	 * @returns ServicesPublic Successful Response
	 * @throws ApiError
	 */
	public static getServicesApiV1ServicesGet(
		data: GetServicesApiV1ServicesGetData = {},
	): CancelablePromise<GetServicesApiV1ServicesGetResponse> {
		return __request(OpenAPI, {
			method: "GET",
			url: "/api/v1/services/",
			query: {
				skip: data.skip,
				limit: data.limit,
				expect_totp: data.expectTotp,
			},
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Create Service
	 * Register a service
	 * @param data The data for the request.
	 * @param data.requestBody
	 * @param data.expectTotp
	 * @returns Message Successful Response
	 * @throws ApiError
	 */
	public static createServiceApiV1ServicesPost(
		data: CreateServiceApiV1ServicesPostData,
	): CancelablePromise<CreateServiceApiV1ServicesPostResponse> {
		return __request(OpenAPI, {
			method: "POST",
			url: "/api/v1/services/",
			query: {
				expect_totp: data.expectTotp,
			},
			body: data.requestBody,
			mediaType: "application/json",
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Get Service
	 * List a user that can edit the service
	 * @param data The data for the request.
	 * @param data.serviceId
	 * @param data.expectTotp
	 * @returns ServicePublic Successful Response
	 * @throws ApiError
	 */
	public static getServiceApiV1ServicesServiceIdGet(
		data: GetServiceApiV1ServicesServiceIdGetData,
	): CancelablePromise<GetServiceApiV1ServicesServiceIdGetResponse> {
		return __request(OpenAPI, {
			method: "GET",
			url: "/api/v1/services/{service_id}",
			path: {
				service_id: data.serviceId,
			},
			query: {
				expect_totp: data.expectTotp,
			},
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Delete Service
	 * Delete a service
	 * @param data The data for the request.
	 * @param data.serviceId
	 * @param data.expectTotp
	 * @returns Message Successful Response
	 * @throws ApiError
	 */
	public static deleteServiceApiV1ServicesServiceIdDelete(
		data: DeleteServiceApiV1ServicesServiceIdDeleteData,
	): CancelablePromise<DeleteServiceApiV1ServicesServiceIdDeleteResponse> {
		return __request(OpenAPI, {
			method: "DELETE",
			url: "/api/v1/services/{service_id}",
			path: {
				service_id: data.serviceId,
			},
			query: {
				expect_totp: data.expectTotp,
			},
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Get Service Users
	 * List service users
	 * @param data The data for the request.
	 * @param data.serviceId
	 * @param data.expectTotp
	 * @returns UserPublic Successful Response
	 * @throws ApiError
	 */
	public static getServiceUsersApiV1ServicesServiceIdUsersGet(
		data: GetServiceUsersApiV1ServicesServiceIdUsersGetData,
	): CancelablePromise<GetServiceUsersApiV1ServicesServiceIdUsersGetResponse> {
		return __request(OpenAPI, {
			method: "GET",
			url: "/api/v1/services/{service_id}/users",
			path: {
				service_id: data.serviceId,
			},
			query: {
				expect_totp: data.expectTotp,
			},
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Get Service Config
	 * Read a service's config
	 * @param data The data for the request.
	 * @param data.serviceId
	 * @param data.expectTotp
	 * @returns ConfigOut Successful Response
	 * @throws ApiError
	 */
	public static getServiceConfigApiV1ServicesServiceIdConfigGet(
		data: GetServiceConfigApiV1ServicesServiceIdConfigGetData,
	): CancelablePromise<GetServiceConfigApiV1ServicesServiceIdConfigGetResponse> {
		return __request(OpenAPI, {
			method: "GET",
			url: "/api/v1/services/{service_id}/config",
			path: {
				service_id: data.serviceId,
			},
			query: {
				expect_totp: data.expectTotp,
			},
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Update Service Config
	 * Register a service's config
	 * @param data The data for the request.
	 * @param data.serviceId
	 * @param data.requestBody
	 * @param data.expectTotp
	 * @returns Message Successful Response
	 * @throws ApiError
	 */
	public static updateServiceConfigApiV1ServicesServiceIdConfigPatch(
		data: UpdateServiceConfigApiV1ServicesServiceIdConfigPatchData,
	): CancelablePromise<UpdateServiceConfigApiV1ServicesServiceIdConfigPatchResponse> {
		return __request(OpenAPI, {
			method: "PATCH",
			url: "/api/v1/services/{service_id}/config",
			path: {
				service_id: data.serviceId,
			},
			query: {
				expect_totp: data.expectTotp,
			},
			body: data.requestBody,
			mediaType: "application/json",
			errors: {
				422: "Validation Error",
			},
		});
	}
}

export class TotpService {
	/**
	 * Enable Totp
	 * Creation of totp if totp not enabled
	 * @param data The data for the request.
	 * @param data.expectTotp
	 * @returns QRUri Successful Response
	 * @throws ApiError
	 */
	public static enableTotpApiV1TotpEnablePost(
		data: EnableTotpApiV1TotpEnablePostData = {},
	): CancelablePromise<EnableTotpApiV1TotpEnablePostResponse> {
		return __request(OpenAPI, {
			method: "POST",
			url: "/api/v1/totp/enable",
			query: {
				expect_totp: data.expectTotp,
			},
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Totp Login Verify
	 * Verify TOTP token for the first time.
	 * @param data The data for the request.
	 * @param data.requestBody
	 * @param data.expectTotp
	 * @returns Message Successful Response
	 * @throws ApiError
	 */
	public static loginVerifyApiV1TotpVerifyPost(
		data: TotpLoginVerifyApiV1TotpVerifyPostData,
	): CancelablePromise<TotpLoginVerifyApiV1TotpVerifyPostResponse> {
		return __request(OpenAPI, {
			method: "POST",
			url: "/api/v1/totp/verify",
			query: {
				expect_totp: data.expectTotp,
			},
			body: data.requestBody,
			mediaType: "application/json",
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Disable Totp
	 * Disable TOTP for the current user.
	 * @param data The data for the request.
	 * @param data.expectTotp
	 * @returns Message Successful Response
	 * @throws ApiError
	 */
	public static disableTotpApiV1TotpDisableDelete(
		data: DisableTotpApiV1TotpDisableDeleteData = {},
	): CancelablePromise<DisableTotpApiV1TotpDisableDeleteResponse> {
		return __request(OpenAPI, {
			method: "DELETE",
			url: "/api/v1/totp/disable",
			query: {
				expect_totp: data.expectTotp,
			},
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Admin Disable Totp
	 * Disable TOTP for the certain user.
	 * @param data The data for the request.
	 * @param data.userId
	 * @param data.expectTotp
	 * @returns Message Successful Response
	 * @throws ApiError
	 */
	public static adminDisableTotpApiV1TotpDisableUserIdPost(
		data: AdminDisableTotpApiV1TotpDisableUserIdPostData,
	): CancelablePromise<AdminDisableTotpApiV1TotpDisableUserIdPostResponse> {
		return __request(OpenAPI, {
			method: "POST",
			url: "/api/v1/totp/disable/{user_id}",
			path: {
				user_id: data.userId,
			},
			query: {
				expect_totp: data.expectTotp,
			},
			errors: {
				422: "Validation Error",
			},
		});
	}
}

export class UsersService {
	/**
	 * Read Users
	 * Retreive users.
	 * @param data The data for the request.
	 * @param data.skip
	 * @param data.limit
	 * @param data.expectTotp
	 * @returns UsersPublic Successful Response
	 * @throws ApiError
	 */
	public static readUsersApiV1UsersGet(
		data: ReadUsersApiV1UsersGetData = {},
	): CancelablePromise<ReadUsersApiV1UsersGetResponse> {
		return __request(OpenAPI, {
			method: "GET",
			url: "/api/v1/users/",
			query: {
				skip: data.skip,
				limit: data.limit,
				expect_totp: data.expectTotp,
			},
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Read User Me
	 * Get current user.
	 * @param data The data for the request.
	 * @param data.expectTotp
	 * @returns UserPublic Successful Response
	 * @throws ApiError
	 */
	public static readUserMeApiV1UsersMeGet(
		data: ReadUserMeApiV1UsersMeGetData = {},
	): CancelablePromise<ReadUserMeApiV1UsersMeGetResponse> {
		return __request(OpenAPI, {
			method: "GET",
			url: "/api/v1/users/me",
			query: {
				expect_totp: data.expectTotp,
			},
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Read User By Id
	 * Get a specific user by id.
	 * @param data The data for the request.
	 * @param data.userId
	 * @param data.expectTotp
	 * @returns UserPublic Successful Response
	 * @throws ApiError
	 */
	public static readUserByIdApiV1UsersUserIdGet(
		data: ReadUserByIdApiV1UsersUserIdGetData,
	): CancelablePromise<ReadUserByIdApiV1UsersUserIdGetResponse> {
		return __request(OpenAPI, {
			method: "GET",
			url: "/api/v1/users/{user_id}",
			path: {
				user_id: data.userId,
			},
			query: {
				expect_totp: data.expectTotp,
			},
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Update User
	 * Update a user.
	 * @param data The data for the request.
	 * @param data.userId
	 * @param data.requestBody
	 * @param data.expectTotp
	 * @returns UserPublic Successful Response
	 * @throws ApiError
	 */
	public static updateUserApiV1UsersUserIdPatch(
		data: UpdateUserApiV1UsersUserIdPatchData,
	): CancelablePromise<UpdateUserApiV1UsersUserIdPatchResponse> {
		return __request(OpenAPI, {
			method: "PATCH",
			url: "/api/v1/users/{user_id}",
			path: {
				user_id: data.userId,
			},
			query: {
				expect_totp: data.expectTotp,
			},
			body: data.requestBody,
			mediaType: "application/json",
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Delete User
	 * Delete a user.
	 * @param data The data for the request.
	 * @param data.userId
	 * @param data.expectTotp
	 * @returns Message Successful Response
	 * @throws ApiError
	 */
	public static deleteUserApiV1UsersUserIdDelete(
		data: DeleteUserApiV1UsersUserIdDeleteData,
	): CancelablePromise<DeleteUserApiV1UsersUserIdDeleteResponse> {
		return __request(OpenAPI, {
			method: "DELETE",
			url: "/api/v1/users/{user_id}",
			path: {
				user_id: data.userId,
			},
			query: {
				expect_totp: data.expectTotp,
			},
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Register User
	 * Create new user without the need to be logged in.
	 * @param data The data for the request.
	 * @param data.requestBody
	 * @param data.expectTotp
	 * @returns Message Successful Response
	 * @throws ApiError
	 */
	public static registerUserApiV1UsersAdduserPost(
		data: RegisterUserApiV1UsersAdduserPostData,
	): CancelablePromise<RegisterUserApiV1UsersAdduserPostResponse> {
		return __request(OpenAPI, {
			method: "POST",
			url: "/api/v1/users/adduser",
			query: {
				expect_totp: data.expectTotp,
			},
			body: data.requestBody,
			mediaType: "application/json",
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Update Password Me
	 * Update own password.
	 * @param data The data for the request.
	 * @param data.requestBody
	 * @param data.expectTotp
	 * @returns Message Successful Response
	 * @throws ApiError
	 */
	public static updatePasswordMeApiV1UsersMePasswordPatch(
		data: UpdatePasswordMeApiV1UsersMePasswordPatchData,
	): CancelablePromise<UpdatePasswordMeApiV1UsersMePasswordPatchResponse> {
		return __request(OpenAPI, {
			method: "PATCH",
			url: "/api/v1/users/me/password",
			query: {
				expect_totp: data.expectTotp,
			},
			body: data.requestBody,
			mediaType: "application/json",
			errors: {
				422: "Validation Error",
			},
		});
	}
}

export class UsersServicesService {
	/**
	 * Get User Services
	 * Get user's services
	 * @param data The data for the request.
	 * @param data.userId
	 * @param data.expectTotp
	 * @returns ServicePublic Successful Response
	 * @throws ApiError
	 */
	public static getUserServicesApiV1UsersUserIdServicesGet(
		data: GetUserServicesApiV1UsersUserIdServicesGetData,
	): CancelablePromise<GetUserServicesApiV1UsersUserIdServicesGetResponse> {
		return __request(OpenAPI, {
			method: "GET",
			url: "/api/v1/users/{user_id}/services",
			path: {
				user_id: data.userId,
			},
			query: {
				expect_totp: data.expectTotp,
			},
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Add Services To User
	 * Add services to a user by IDs.
	 * @param data The data for the request.
	 * @param data.userId
	 * @param data.requestBody
	 * @param data.expectTotp
	 * @returns Message Successful Response
	 * @throws ApiError
	 */
	public static addServicesToUserApiV1UsersUserIdServicesPatch(
		data: AddServicesToUserApiV1UsersUserIdServicesPatchData,
	): CancelablePromise<AddServicesToUserApiV1UsersUserIdServicesPatchResponse> {
		return __request(OpenAPI, {
			method: "PATCH",
			url: "/api/v1/users/{user_id}/services",
			path: {
				user_id: data.userId,
			},
			query: {
				expect_totp: data.expectTotp,
			},
			body: data.requestBody,
			mediaType: "application/json",
			errors: {
				422: "Validation Error",
			},
		});
	}
}

export class UtilsService {
	/**
	 * Test Email
	 * Test emails.
	 * @param data The data for the request.
	 * @param data.emailTo
	 * @param data.expectTotp
	 * @returns Message Successful Response
	 * @throws ApiError
	 */
	public static testEmailApiV1UtilsTestEmailPost(
		data: TestEmailApiV1UtilsTestEmailPostData,
	): CancelablePromise<TestEmailApiV1UtilsTestEmailPostResponse> {
		return __request(OpenAPI, {
			method: "POST",
			url: "/api/v1/utils/test-email",
			query: {
				email_to: data.emailTo,
				expect_totp: data.expectTotp,
			},
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Health Check
	 * @returns boolean Successful Response
	 * @throws ApiError
	 */
	public static healthCheckApiV1UtilsHealthCheckGet(): CancelablePromise<HealthCheckApiV1UtilsHealthCheckGetResponse> {
		return __request(OpenAPI, {
			method: "GET",
			url: "/api/v1/utils/health-check",
		});
	}
}
