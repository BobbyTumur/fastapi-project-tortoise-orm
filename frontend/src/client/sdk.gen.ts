// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from "./core/CancelablePromise";
import { OpenAPI } from "./core/OpenAPI";
import { request as __request } from "./core/request";
import type {
	LoginLoginAccessTokenData,
	LoginLoginAccessTokenResponse,
	LoginValidateTotpData,
	LoginValidateTotpResponse,
	LoginRefreshAccessTokenResponse,
	LoginRecoverPasswordData,
	LoginRecoverPasswordResponse,
	LoginResetPasswordData,
	LoginResetPasswordResponse,
	LoginSetUpPasswordData,
	LoginSetUpPasswordResponse,
	ServicesGetServicesData,
	ServicesGetServicesResponse,
	ServicesCreateServiceData,
	ServicesCreateServiceResponse,
	ServicesGetServiceData,
	ServicesGetServiceResponse,
	ServicesDeleteServiceData,
	ServicesDeleteServiceResponse,
	ServicesGetServiceUsersData,
	ServicesGetServiceUsersResponse,
	ServicesGetServiceConfigData,
	ServicesGetServiceConfigResponse,
	ServicesUpdateServiceConfigData,
	ServicesUpdateServiceConfigResponse,
	TotpEnableTotpResponse,
	TotpTotpLoginVerifyData,
	TotpTotpLoginVerifyResponse,
	TotpDisableTotpResponse,
	TotpAdminDisableTotpData,
	TotpAdminDisableTotpResponse,
	UsersReadUsersData,
	UsersReadUsersResponse,
	UsersReadUserMeResponse,
	UsersReadUserByIdData,
	UsersReadUserByIdResponse,
	UsersUpdateUserData,
	UsersUpdateUserResponse,
	UsersDeleteUserData,
	UsersDeleteUserResponse,
	UsersRegisterUserData,
	UsersRegisterUserResponse,
	UsersUpdatePasswordMeData,
	UsersUpdatePasswordMeResponse,
	UsersServicesGetUserServicesData,
	UsersServicesGetUserServicesResponse,
	UsersServicesAddServicesToUserData,
	UsersServicesAddServicesToUserResponse,
	UtilsTestEmailData,
	UtilsTestEmailResponse,
	UtilsHealthCheckResponse,
} from "./types.gen";

export class LoginService {
	/**
	 * Login Access Token
	 * OAuth2 compatible token login, get an access token for future requests
	 * @param data The data for the request.
	 * @param data.formData
	 * @returns Token Successful Response
	 * @throws ApiError
	 */
	public static loginAccessToken(
		data: LoginLoginAccessTokenData,
	): CancelablePromise<LoginLoginAccessTokenResponse> {
		return __request(OpenAPI, {
			method: "POST",
			url: "/api/v1/login/access-token",
			formData: data.formData,
			mediaType: "application/x-www-form-urlencoded",
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Validate Totp
	 * Validate TOTP code and issue an access token
	 * @param data The data for the request.
	 * @param data.requestBody
	 * @returns Token Successful Response
	 * @throws ApiError
	 */
	public static validateTotp(
		data: LoginValidateTotpData,
	): CancelablePromise<LoginValidateTotpResponse> {
		return __request(OpenAPI, {
			method: "POST",
			url: "/api/v1/login/validate-totp",
			body: data.requestBody,
			mediaType: "application/json",
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Refresh Access Token
	 * Refresh the access token using the refresh token stored in the cookie.
	 * @returns Token Successful Response
	 * @throws ApiError
	 */
	public static refreshAccessToken(): CancelablePromise<LoginRefreshAccessTokenResponse> {
		return __request(OpenAPI, {
			method: "POST",
			url: "/api/v1/login/refresh-token",
		});
	}

	/**
	 * Recover Password
	 * Password Recovery
	 * @param data The data for the request.
	 * @param data.email
	 * @returns Message Successful Response
	 * @throws ApiError
	 */
	public static recoverPassword(
		data: LoginRecoverPasswordData,
	): CancelablePromise<LoginRecoverPasswordResponse> {
		return __request(OpenAPI, {
			method: "POST",
			url: "/api/v1/password-recovery/{email}",
			path: {
				email: data.email,
			},
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Reset Password
	 * Reset password
	 * @param data The data for the request.
	 * @param data.requestBody
	 * @returns Message Successful Response
	 * @throws ApiError
	 */
	public static resetPassword(
		data: LoginResetPasswordData,
	): CancelablePromise<LoginResetPasswordResponse> {
		return __request(OpenAPI, {
			method: "POST",
			url: "/api/v1/reset-password",
			body: data.requestBody,
			mediaType: "application/json",
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Set Up Password
	 * Set up password
	 * @param data The data for the request.
	 * @param data.requestBody
	 * @returns Message Successful Response
	 * @throws ApiError
	 */
	public static setUpPassword(
		data: LoginSetUpPasswordData,
	): CancelablePromise<LoginSetUpPasswordResponse> {
		return __request(OpenAPI, {
			method: "POST",
			url: "/api/v1/setup-password",
			body: data.requestBody,
			mediaType: "application/json",
			errors: {
				422: "Validation Error",
			},
		});
	}
}

export class ServicesService {
	/**
	 * Get Services
	 * List all services
	 * @param data The data for the request.
	 * @param data.skip
	 * @param data.limit
	 * @returns ServicesPublic Successful Response
	 * @throws ApiError
	 */
	public static getServices(
		data: ServicesGetServicesData = {},
	): CancelablePromise<ServicesGetServicesResponse> {
		return __request(OpenAPI, {
			method: "GET",
			url: "/api/v1/services/",
			query: {
				skip: data.skip,
				limit: data.limit,
			},
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Create Service
	 * Register a service
	 * @param data The data for the request.
	 * @param data.requestBody
	 * @returns Message Successful Response
	 * @throws ApiError
	 */
	public static createService(
		data: ServicesCreateServiceData,
	): CancelablePromise<ServicesCreateServiceResponse> {
		return __request(OpenAPI, {
			method: "POST",
			url: "/api/v1/services/",
			body: data.requestBody,
			mediaType: "application/json",
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Get Service
	 * List a user that can edit the service
	 * @param data The data for the request.
	 * @param data.serviceId
	 * @returns ServicePublic Successful Response
	 * @throws ApiError
	 */
	public static getService(
		data: ServicesGetServiceData,
	): CancelablePromise<ServicesGetServiceResponse> {
		return __request(OpenAPI, {
			method: "GET",
			url: "/api/v1/services/{service_id}",
			path: {
				service_id: data.serviceId,
			},
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Delete Service
	 * Delete a service
	 * @param data The data for the request.
	 * @param data.serviceId
	 * @returns Message Successful Response
	 * @throws ApiError
	 */
	public static deleteService(
		data: ServicesDeleteServiceData,
	): CancelablePromise<ServicesDeleteServiceResponse> {
		return __request(OpenAPI, {
			method: "DELETE",
			url: "/api/v1/services/{service_id}",
			path: {
				service_id: data.serviceId,
			},
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Get Service Users
	 * List service users
	 * @param data The data for the request.
	 * @param data.serviceId
	 * @returns UserPublic Successful Response
	 * @throws ApiError
	 */
	public static getServiceUsers(
		data: ServicesGetServiceUsersData,
	): CancelablePromise<ServicesGetServiceUsersResponse> {
		return __request(OpenAPI, {
			method: "GET",
			url: "/api/v1/services/{service_id}/users",
			path: {
				service_id: data.serviceId,
			},
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Get Service Config
	 * Read a service's config
	 * @param data The data for the request.
	 * @param data.serviceId
	 * @returns ConfigOut Successful Response
	 * @throws ApiError
	 */
	public static getServiceConfig(
		data: ServicesGetServiceConfigData,
	): CancelablePromise<ServicesGetServiceConfigResponse> {
		return __request(OpenAPI, {
			method: "GET",
			url: "/api/v1/services/{service_id}/config",
			path: {
				service_id: data.serviceId,
			},
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Update Service Config
	 * Register a service's config
	 * @param data The data for the request.
	 * @param data.serviceId
	 * @param data.requestBody
	 * @returns Message Successful Response
	 * @throws ApiError
	 */
	public static updateServiceConfig(
		data: ServicesUpdateServiceConfigData,
	): CancelablePromise<ServicesUpdateServiceConfigResponse> {
		return __request(OpenAPI, {
			method: "PATCH",
			url: "/api/v1/services/{service_id}/config",
			path: {
				service_id: data.serviceId,
			},
			body: data.requestBody,
			mediaType: "application/json",
			errors: {
				422: "Validation Error",
			},
		});
	}
}

export class TotpService {
	/**
	 * Enable Totp
	 * Creation of totp if totp not enabled
	 * @returns QRUri Successful Response
	 * @throws ApiError
	 */
	public static enableTotp(): CancelablePromise<TotpEnableTotpResponse> {
		return __request(OpenAPI, {
			method: "POST",
			url: "/api/v1/totp/enable",
		});
	}

	/**
	 * Totp Login Verify
	 * Verify TOTP token for the first time.
	 * @param data The data for the request.
	 * @param data.requestBody
	 * @returns Message Successful Response
	 * @throws ApiError
	 */
	public static totpLoginVerify(
		data: TotpTotpLoginVerifyData,
	): CancelablePromise<TotpTotpLoginVerifyResponse> {
		return __request(OpenAPI, {
			method: "POST",
			url: "/api/v1/totp/verify",
			body: data.requestBody,
			mediaType: "application/json",
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Disable Totp
	 * Disable TOTP for the current user.
	 * @returns Message Successful Response
	 * @throws ApiError
	 */
	public static disableTotp(): CancelablePromise<TotpDisableTotpResponse> {
		return __request(OpenAPI, {
			method: "DELETE",
			url: "/api/v1/totp/disable",
		});
	}

	/**
	 * Admin Disable Totp
	 * Disable TOTP for the certain user.
	 * @param data The data for the request.
	 * @param data.userId
	 * @returns Message Successful Response
	 * @throws ApiError
	 */
	public static adminDisableTotp(
		data: TotpAdminDisableTotpData,
	): CancelablePromise<TotpAdminDisableTotpResponse> {
		return __request(OpenAPI, {
			method: "POST",
			url: "/api/v1/totp/disable/{user_id}",
			path: {
				user_id: data.userId,
			},
			errors: {
				422: "Validation Error",
			},
		});
	}
}

export class UsersService {
	/**
	 * Read Users
	 * Retreive users.
	 * @param data The data for the request.
	 * @param data.skip
	 * @param data.limit
	 * @returns UsersPublic Successful Response
	 * @throws ApiError
	 */
	public static readUsers(
		data: UsersReadUsersData = {},
	): CancelablePromise<UsersReadUsersResponse> {
		return __request(OpenAPI, {
			method: "GET",
			url: "/api/v1/users/",
			query: {
				skip: data.skip,
				limit: data.limit,
			},
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Read User Me
	 * Get current user.
	 * @returns UserPublic Successful Response
	 * @throws ApiError
	 */
	public static readUserMe(): CancelablePromise<UsersReadUserMeResponse> {
		return __request(OpenAPI, {
			method: "GET",
			url: "/api/v1/users/me",
		});
	}

	/**
	 * Read User By Id
	 * Get a specific user by id.
	 * @param data The data for the request.
	 * @param data.userId
	 * @returns UserPublic Successful Response
	 * @throws ApiError
	 */
	public static readUserById(
		data: UsersReadUserByIdData,
	): CancelablePromise<UsersReadUserByIdResponse> {
		return __request(OpenAPI, {
			method: "GET",
			url: "/api/v1/users/{user_id}",
			path: {
				user_id: data.userId,
			},
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Update User
	 * Update a user.
	 * @param data The data for the request.
	 * @param data.userId
	 * @param data.requestBody
	 * @returns UserPublic Successful Response
	 * @throws ApiError
	 */
	public static updateUser(
		data: UsersUpdateUserData,
	): CancelablePromise<UsersUpdateUserResponse> {
		return __request(OpenAPI, {
			method: "PATCH",
			url: "/api/v1/users/{user_id}",
			path: {
				user_id: data.userId,
			},
			body: data.requestBody,
			mediaType: "application/json",
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Delete User
	 * Delete a user.
	 * @param data The data for the request.
	 * @param data.userId
	 * @returns Message Successful Response
	 * @throws ApiError
	 */
	public static deleteUser(
		data: UsersDeleteUserData,
	): CancelablePromise<UsersDeleteUserResponse> {
		return __request(OpenAPI, {
			method: "DELETE",
			url: "/api/v1/users/{user_id}",
			path: {
				user_id: data.userId,
			},
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Register User
	 * Create new user without the need to be logged in.
	 * @param data The data for the request.
	 * @param data.requestBody
	 * @returns Message Successful Response
	 * @throws ApiError
	 */
	public static registerUser(
		data: UsersRegisterUserData,
	): CancelablePromise<UsersRegisterUserResponse> {
		return __request(OpenAPI, {
			method: "POST",
			url: "/api/v1/users/adduser",
			body: data.requestBody,
			mediaType: "application/json",
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Update Password Me
	 * Update own password.
	 * @param data The data for the request.
	 * @param data.requestBody
	 * @returns Message Successful Response
	 * @throws ApiError
	 */
	public static updatePasswordMe(
		data: UsersUpdatePasswordMeData,
	): CancelablePromise<UsersUpdatePasswordMeResponse> {
		return __request(OpenAPI, {
			method: "PATCH",
			url: "/api/v1/users/me/password",
			body: data.requestBody,
			mediaType: "application/json",
			errors: {
				422: "Validation Error",
			},
		});
	}
}

export class UsersServicesService {
	/**
	 * Get User Services
	 * Get user's services
	 * @param data The data for the request.
	 * @param data.userId
	 * @returns ServicePublic Successful Response
	 * @throws ApiError
	 */
	public static getUserServices(
		data: UsersServicesGetUserServicesData,
	): CancelablePromise<UsersServicesGetUserServicesResponse> {
		return __request(OpenAPI, {
			method: "GET",
			url: "/api/v1/users/{user_id}/services",
			path: {
				user_id: data.userId,
			},
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Add Services To User
	 * Add services to a user by IDs.
	 * @param data The data for the request.
	 * @param data.userId
	 * @param data.requestBody
	 * @returns Message Successful Response
	 * @throws ApiError
	 */
	public static addServicesToUser(
		data: UsersServicesAddServicesToUserData,
	): CancelablePromise<UsersServicesAddServicesToUserResponse> {
		return __request(OpenAPI, {
			method: "PATCH",
			url: "/api/v1/users/{user_id}/services",
			path: {
				user_id: data.userId,
			},
			body: data.requestBody,
			mediaType: "application/json",
			errors: {
				422: "Validation Error",
			},
		});
	}
}

export class UtilsService {
	/**
	 * Test Email
	 * Test emails.
	 * @param data The data for the request.
	 * @param data.emailTo
	 * @returns Message Successful Response
	 * @throws ApiError
	 */
	public static testEmail(
		data: UtilsTestEmailData,
	): CancelablePromise<UtilsTestEmailResponse> {
		return __request(OpenAPI, {
			method: "POST",
			url: "/api/v1/utils/test-email",
			query: {
				email_to: data.emailTo,
			},
			errors: {
				422: "Validation Error",
			},
		});
	}

	/**
	 * Health Check
	 * @returns boolean Successful Response
	 * @throws ApiError
	 */
	public static healthCheck(): CancelablePromise<UtilsHealthCheckResponse> {
		return __request(OpenAPI, {
			method: "GET",
			url: "/api/v1/utils/health-check",
		});
	}
}
